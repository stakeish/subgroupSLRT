// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cppem_normal
List cppem_normal(arma::vec y, arma::mat x, arma::mat z, arma::vec d, double pi, arma::mat alpha_init, arma::vec beta1_init, arma::vec beta2_init, double sigma_init, int ninits, int maxit, double tol);
RcppExport SEXP _subgroupSLRT_cppem_normal(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP dSEXP, SEXP piSEXP, SEXP alpha_initSEXP, SEXP beta1_initSEXP, SEXP beta2_initSEXP, SEXP sigma_initSEXP, SEXP ninitsSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta1_init(beta1_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta2_init(beta2_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_init(sigma_initSEXP);
    Rcpp::traits::input_parameter< int >::type ninits(ninitsSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cppem_normal(y, x, z, d, pi, alpha_init, beta1_init, beta2_init, sigma_init, ninits, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// EM_gamma_fixed_cpp
List EM_gamma_fixed_cpp(int n, arma::mat x, arma::vec d, arma::mat z, arma::vec y, arma::vec gamma, int q1, arma::vec theta_init, double epsilon, int maxit, arma::mat xx, arma::vec xy);
RcppExport SEXP _subgroupSLRT_EM_gamma_fixed_cpp(SEXP nSEXP, SEXP xSEXP, SEXP dSEXP, SEXP zSEXP, SEXP ySEXP, SEXP gammaSEXP, SEXP q1SEXP, SEXP theta_initSEXP, SEXP epsilonSEXP, SEXP maxitSEXP, SEXP xxSEXP, SEXP xySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xy(xySEXP);
    rcpp_result_gen = Rcpp::wrap(EM_gamma_fixed_cpp(n, x, d, z, y, gamma, q1, theta_init, epsilon, maxit, xx, xy));
    return rcpp_result_gen;
END_RCPP
}
// llogit
double llogit(arma::vec gamma, arma::mat z, arma::vec w);
RcppExport SEXP _subgroupSLRT_llogit(SEXP gammaSEXP, SEXP zSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(llogit(gamma, z, w));
    return rcpp_result_gen;
END_RCPP
}
// dlogit
arma::vec dlogit(arma::vec gamma, arma::mat z, arma::vec w);
RcppExport SEXP _subgroupSLRT_dlogit(SEXP gammaSEXP, SEXP zSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogit(gamma, z, w));
    return rcpp_result_gen;
END_RCPP
}
// obj
double obj(arma::vec gamma, arma::mat z, arma::mat x, arma::vec y, arma::vec alpha, double beta, double lambda, arma::vec d, double sigma);
RcppExport SEXP _subgroupSLRT_obj(SEXP gammaSEXP, SEXP zSEXP, SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP dSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(obj(gamma, z, x, y, alpha, beta, lambda, d, sigma));
    return rcpp_result_gen;
END_RCPP
}
// grad
arma::vec grad(arma::vec gamma, arma::mat z, arma::mat x, arma::vec y, arma::vec alpha, double beta, double lambda, arma::vec d, double sigma);
RcppExport SEXP _subgroupSLRT_grad(SEXP gammaSEXP, SEXP zSEXP, SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP dSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(grad(gamma, z, x, y, alpha, beta, lambda, d, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_subgroupSLRT_cppem_normal", (DL_FUNC) &_subgroupSLRT_cppem_normal, 12},
    {"_subgroupSLRT_EM_gamma_fixed_cpp", (DL_FUNC) &_subgroupSLRT_EM_gamma_fixed_cpp, 12},
    {"_subgroupSLRT_llogit", (DL_FUNC) &_subgroupSLRT_llogit, 3},
    {"_subgroupSLRT_dlogit", (DL_FUNC) &_subgroupSLRT_dlogit, 3},
    {"_subgroupSLRT_obj", (DL_FUNC) &_subgroupSLRT_obj, 9},
    {"_subgroupSLRT_grad", (DL_FUNC) &_subgroupSLRT_grad, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_subgroupSLRT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
